package com.yohan.event_planner.domain;

import jakarta.persistence.*;
import java.util.HashSet;
import java.util.Objects;
import java.util.Set;

/**
 * Represents a security role within the system, such as User, Moderator, or Admin.
 * Roles are assigned to users to control access and permissions throughout the application.
 * <p>
 * Role names should follow the convention of being prefixed with "ROLE_" for Spring Security compatibility.
 */
@Entity
@Table(name = "roles")
public class Role {

    /**
     * The unique identifier for the role.
     * <p>
     * This field is generated by the database and should never be set manually.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    /**
     * The name of the role.
     * Examples: "ROLE_USER", "ROLE_MOD", "ROLE_ADMIN".
     * <p>
     * Warning: Changing the role name after creation can cause inconsistencies in security logic and permissions.
     * Use with caution and only if you understand the implications.
     */
    @Column(nullable = false, unique = true, length = 50)
    private String name;

    /**
     * The set of users associated with this role.
     * <p>
     * This is the inverse side of the many-to-many relationship mapped by the "roles" field in User.
     * This collection is managed by User entity methods and should not be modified directly.
     */
    @ManyToMany(mappedBy = "roles")
    private Set<User> users = new HashSet<>();

    /**
     * Default constructor for JPA.
     */
    public Role() {}

    /**
     * Constructs a Role with the given name.
     *
     * @param name the name of the role
     */
    public Role(String name) {
        this.name = name;
    }

    /**
     * Gets the unique identifier of the role.
     *
     * @return the role id
     */
    public Long getId() {
        return id;
    }

    // No setter for id to avoid manual assignment

    /**
     * Gets the name of the role.
     *
     * @return the role name
     */
    public String getName() {
        return name;
    }

    /**
     * Sets the name of the role.
     * <p>
     * Warning: Changing the role name after creation can cause inconsistencies in security logic and permissions.
     * Use with caution and only if you understand the implications.
     *
     * @param name the role name to set
     */
    public void setName(String name) {
        this.name = name;
    }

    /**
     * Gets the users associated with this role.
     *
     * @return a set of users assigned this role
     */
    public Set<User> getUsers() {
        return users;
    }

    /**
     * Roles are considered equal if they have the same name.
     *
     * @param o other object to compare
     * @return true if both roles have the same name, false otherwise
     */
    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Role role)) return false;
        return Objects.equals(getName(), role.getName());
    }

    /**
     * Hash code based on the role name.
     *
     * @return hash code of the role name
     */
    @Override
    public int hashCode() {
        return Objects.hash(getName());
    }

    /**
     * Returns a string representation of the role.
     *
     * @return string describing the role
     */
    @Override
    public String toString() {
        return "Role{" +
                "id=" + id +
                ", name='" + name + '\'' +
                '}';
    }
}
